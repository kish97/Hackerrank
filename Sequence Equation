#include <bits/stdc++.h>
using namespace std;
/*algorithm:
1. Read elements and store it in p
2. call permutationEquation function
3. call create_inverse function, in this read value of p and store them starting from index 1 till index n;
4. p = [4 3 5 1 2], pinv = [0 4 3 5 1 2]

f(f(y)) = x -> y = finv(finv(x))


*/

// Complete the permutationEquation function below.
vector<int> permutationEquation(vector<int> p) {
int n = p.size();
vector<int> pinv(n+1); // creating inverse function by converting it to indexed 1;

for(int i=1;i<pinv.size();i++){
    pinv[i] = p[i-1];
}

vector<int> res;
for(int i = 1; i< pinv.size();i++){
    res.push_back(pinv[pinv[i]]);
}

return res;
}

int main()
{
    int n;
    cin >> n;

    vector<int> p(n);

    for (int i = 0; i <n; i++) {
        cin>>p[i];
    }

    vector<int> result = permutationEquation(p);

    for (int i = 0; i < result.size(); i++) {
        cout << result[i];

        if (i != result.size() - 1) {
            cout << "\n";
        }
    }

    return 0;
}

